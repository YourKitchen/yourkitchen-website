// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String         @id @default(uuid())
  allergenes     AllergenType[]
  defaultPersons Int            @default(4)
  name           String?
  email          String         @unique
  image          String?

  // Auth
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  privacySettings      Json       @default("{}")
  notificationSettings Json       @default("{}")
  followers            Follows[]  @relation("following")
  following            Follows[]  @relation("follower")
  recipes              Recipe[]   @relation("recipeOwner")
  feeditems            FeedItem[]
  ratings              Rating[]
  role                 String?

  updated DateTime @updatedAt
  created DateTime @default(now())

  // The Meal Plan that the user owns
  mealPlan MealPlan? @relation("owner")
  fridge   Fridge?   @relation("owner")
}

model Follows {
  // The person that is following someone
  follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  // The person that is being followed
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
}

model Recipe {
  id      String  @id @default(uuid())
  owner   User?   @relation("recipeOwner", fields: [ownerId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  ownerId String?

  name        String
  description String?
  // Cuisine is referenced because it allows them to be used like tags
  cuisine     Cuisine @relation(fields: [cuisineName], references: [name])
  cuisineName String

  recipeType RecipeType
  mealType   MealType

  preparationTime Int
  image           RecipeImage[]

  ingredients RecipeIngredient[]
  steps       String[]
  ratings     Rating[]
  persons     Int                @default(4)

  feedItems FeedItem[]

  updated DateTime @updatedAt
  created DateTime @default(now())

  // The connection to the meal plans that this recipe occurs in.
  mealPlanRecipes MealPlanRecipe[]
}

model Cuisine {
  name String @id

  recipes Recipe[]
}

enum RecipeType {
  DESSERT
  MAIN
  SIDE
  STARTER
  SNACK
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}

model RecipeImage {
  id   String @id @default(uuid())
  link String

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  photoRefUrl     String?
  photographer    String?
  photographerUrl String?
}

model RecipeIngredient {
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  unit   Unit
  amount Int

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  @@id([recipeId, ingredientId])
}

enum Unit {
  TEASPOON
  TABLESPOON
  FLUID_OUNCE
  CUP
  PINT
  QUART
  GALLON
  MILLILITER
  LITER
  GRAM
  KILOGRAM
  OUNCE
  POUND
  PINCH
  DASH
  DROP
  SLICE
  PIECE
  CLOVE
  BULB
  STICK
  CUBIC_INCH
  CUBIC_FOOT
  PACKAGE
}

// Done
model Ingredient {
  id   String @id
  name String @unique

  fridges       FridgeIngredient[]
  recipes       RecipeIngredient[]
  allergenTypes AllergenType[]     @default([])
}

// Done
enum AllergenType {
  NUT
  PEANUTS
  LACTOSE
  EGGS
  FISH
  SHELLFISH
  SOY
  WHEAT
  GLUTEN
  SESAME
  MUSTARD
  SULFITES
  CELERY
  LUPIN
  MOLLUSKUS
}

// Done
model Rating {
  id      String  @id @default(uuid())
  score   Int
  message String?
  owner   User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  // Optional relations, depending on which one it concerns. One will be defined
  recipe     Recipe?   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId   String?
  feedItem   FeedItem? @relation(fields: [feedItemId], references: [id], onDelete: Cascade)
  feedItemId String?

  updated DateTime @updatedAt
  created DateTime @default(now())

  @@unique([recipeId, ownerId])
  @@unique([feedItemId, ownerId])
}

// Done
model FeedItem {
  id       String   @id @default(uuid())
  owner    User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String
  ratings  Rating[]

  description String

  updated DateTime @updatedAt
  created DateTime @default(now())
}

model MealPlanRecipe {
  id String @id @default(uuid())

  date       DateTime
  mealType   MealType
  recipeType RecipeType
  recipe     Recipe     @relation(fields: [recipeId], references: [id])

  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id])
  mealPlanId String
  recipeId   String
}

model MealPlan {
  id      String @id @default(uuid())
  owner   User   @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @unique

  public Boolean @default(true)

  recipes MealPlanRecipe[]

  updated DateTime @updatedAt
  created DateTime @default(now())
}
model FridgeIngredient {
  fridge   Fridge @relation(fields: [fridgeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fridgeId String

  unit   Unit
  amount Int

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  @@id([fridgeId, ingredientId])
}

model Fridge {
  id      String @id @default(uuid())
  owner   User   @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @unique

  ingredients FridgeIngredient[]
}
